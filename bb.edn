{:paths ["src"]
 :deps {aero/aero {:mvn/version "1.1.6"}
        clojure-msgpack/clojure-msgpack {:mvn/version "1.2.1"}
        com.github.liquidz/merr {:mvn/version "0.4.193"}
        com.stuartsierra/component {:mvn/version "1.1.0"}
        dev.weavejester/medley {:mvn/version "1.7.0"}
        exoscale/interceptor {:mvn/version "0.1.16"}
        metosin/malli {:mvn/version "0.14.0"}
        rewrite-clj/rewrite-clj {:mvn/version "1.1.47"}}

 :__elin_internal__
 {:command {:deps {nrepl/nrepl {:mvn/version "1.1.0"}
                   refactor-nrepl/refactor-nrepl {:mvn/version "3.9.1"}
                   cider/cider-nrepl {:mvn/version "0.45.0"}}
            :middlewares [cider.nrepl/cider-middleware
                          refactor-nrepl.middleware/wrap-refactor]}}

 :tasks
 {start-server {:task (shell "bb -m elin.core '{\"server\": {\"host\": \"localhost\", \"port\": 12233}, \"env\": {\"cwd\": \".\"}}'")}

  repl {:override-builtin true
        :extra-paths ["dev" "test"]
        :requires ([elin.dev]
                   [elin.test-helper])
        ;; :task (elin.t.nrepl/-main)
        :task (exec 'elin.task.nrepl/-main)}

  lint (shell "clj-kondo --lint src:test")

  format-check (shell "cljstyle check")

  test {:extra-paths ["test"]
        :extra-deps {io.github.cognitect-labs/test-runner {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
        :task (exec 'cognitect.test-runner.api/test)
        :exec-args {:dirs ["test"]}
        :org.babashka/cli {:coerce {:nses [:symbol]
                                    :vars [:symbol]}}}

  check-deps-edn {:requires ([clojure.java.io :as io])
                  :task (when (< (.lastModified (io/file "deps.edn"))
                                 (.lastModified (io/file "bb.edn")))
                          (throw (ex-info "deps.edn is outdated" {})))}

  clj-kondo-emit {:extra-paths ["test"]
                  :extra-deps {org.clojure/tools.namespace {:mvn/version "1.4.5"}}
                  :requires ([malli.clj-kondo :as mc]
                             [clojure.tools.namespace.find :as ctnf]
                             [clojure.java.io :as io])
                  :task (do (doseq [ns-sym (concat (ctnf/find-namespaces-in-dir (io/file "src"))
                                                   (ctnf/find-namespaces-in-dir (io/file "test")))]
                              (require ns-sym)
                              (mc/collect (find-ns ns-sym)))
                            (mc/emit!))}

  check-all {:depends [clj-kondo-emit lint format-check test check-deps-edn]}

  deps-edn {:requires ([clojure.java.io :as io])
            :task (do (shell {:out :write :out-file (io/file "deps.edn")} "echo ;; DO NOT EDIT THIS FILE DIRECTLY.")
                      (shell {:out :append :out-file (io/file "deps.edn")} "echo ;; This file is generated by 'bb deps-edn' command.")
                      (shell {:out :append :out-file (io/file "deps.edn")} "bb print-deps"))}

  outdated (clojure "-Sdeps '{:deps {com.github.liquidz/antq {:mvn/version \"RELEASE\"}}}' -M -m antq.core --upgrade --skip=clojure-cli")}}
