#!/usr/bin/env bb

#_{:clj-kondo/ignore [:namespace-name-mismatch]}
(ns elin
  (:require
    [babashka.cli :as cli]
    [babashka.deps :as deps]
    [clojure.edn :as edn]
    [clojure.java.io :as io]
    [clojure.string :as str]))

(def ^:private cwd (System/getProperty "user.dir"))
(def ^:private clojure-command
  (or (System/getenv "ELIN_REPL_CLOJURE_CLI_CMD")
      "clj"))

(def ^:private project-root
  (-> (io/file *file*)
      (.getParentFile)
      (.getParentFile)
      (.getAbsolutePath)))

(deps/add-deps
  {:deps {'babashka/process {:mvn/version "0.5.21"}
          'liquidz/elin {:local/root project-root}}})
(require
  '[babashka.process :as proc])

(def ^:private command-config
  (-> (io/file project-root "bb.edn")
      (slurp)
      (edn/read-string)
      (get-in [:__elin_internal__ :command])))

(defn- existing-file
  [dir filename]
  (let [file (io/file dir filename)]
    (when (.exists file)
      file)))

(defn- find-project-files
  [cwd]
  (loop [dir (io/file cwd)]
    (when dir
      (let [deps-edn-file (existing-file dir "deps.edn")
            project-clj-file (existing-file dir "project.clj")]

        (if (or deps-edn-file project-clj-file)
          {:clojure-cli deps-edn-file
           :leiningen project-clj-file}
          (recur (.getParentFile dir)))))))

(defn- select-project
  [{:keys [force-leiningen force-shadow-cljs]}
   cwd]
  (let [res (find-project-files cwd)]
    (cond
      force-leiningen
      (first (select-keys res [:leiningen]))

      force-shadow-cljs
      (first (select-keys res [:shadow-cljs]))

      :else
      (first (select-keys res [:clojure-cli])))))

(def ^:private cli-options-map
  {"repl" {:force-leiningen {:coerce :boolean}
           :force-shadow-cljs {:coerce :boolean}
           :dry-run {:coerce :boolean}
           :instant {:coerce :boolean}
           :help {:default false :coerce :boolean}}})

(def ^:private elin-option-map
  (update-vals cli-options-map #(->> (keys %)
                                     (map (comp (partial str "--") name))
                                     (set))))

(defn- parse-opts
  [[sub-command & args]]
  (let [option-set (or (get elin-option-map sub-command)
                       #{})
        cli-options (or (get cli-options-map sub-command)
                        {})
        {elin-args true rest-args false} (group-by #(contains? option-set %) args)]
    {:options (cli/parse-opts elin-args cli-options)
     :rest-args rest-args}))

(defmulti dispatch first)
(defmethod dispatch :default
  [_]
  (throw (ex-info "Unknown command" {})))

(defmethod dispatch "repl"
  [args]
  (let [{:keys [options rest-args]} (parse-opts args)
        [project _] (select-project options cwd)
        commands (case project
                    :clojure-cli
                    (concat [clojure-command]
                            rest-args
                            ["-Sdeps" (pr-str {:deps (:deps command-config)})
                             "-M" "-m" "nrepl.cmdline"
                             "-m" (pr-str (:middlewares command-config))
                             "--interactive"])

                   (throw (ex-info "No project found" {:cwd cwd})))]
    (if (:dry-run options)
      (println (str/join " " commands))
      (apply proc/shell {:out :inherit :in :inherit} commands))))

(defn -main [& args]
  (try
    (dispatch args)
    (catch Exception ex
      (binding [*out* *err*]
        (println (ex-message ex))))))

(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))

(comment
  (let [sample-args ["repl" "-A:dev" "--dry-run"]]
    (apply -main sample-args)))

;; vim:ft=clojure
