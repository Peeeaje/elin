#!/usr/bin/env bb

#_{:clj-kondo/ignore [:namespace-name-mismatch]}
(ns elin
  (:require
    [babashka.cli :as cli]
    [babashka.deps :as deps]
    [clojure.java.io :as io]
    [clojure.string :as str]))

(def ^:private cwd (System/getProperty "user.dir"))

(def ^:private project-root
  (-> (io/file *file*)
      (.getParentFile)
      (.getParentFile)
      (.getAbsolutePath)))

(deps/add-deps
  {:deps {'liquidz/elin {:local/root project-root}}})

(require
  '[babashka.process :as proc]
  '[elin.function.jack-in :as e.f.jack-in]
  '[elin.util.nrepl :as e.u.nrepl])

(def ^:private cli-options-map
  {"repl" {:force-leiningen {:coerce :boolean}
           :force-shadow-cljs {:coerce :boolean}
           :dry-run {:coerce :boolean}
           :instant {:coerce :boolean}
           :help {:default false :coerce :boolean}}})

(def ^:private elin-option-map
  (update-vals cli-options-map #(->> (keys %)
                                     (map (comp (partial str "--") name))
                                     (set))))

(defn- parse-opts
  [[sub-command & args]]
  (let [option-set (or (get elin-option-map sub-command)
                       #{})
        cli-options (or (get cli-options-map sub-command)
                        {})
        {elin-args true rest-args false} (group-by #(contains? option-set %) args)]
    {:options (cli/parse-opts elin-args cli-options)
     :rest-args rest-args}))

(defmulti dispatch first)
(defmethod dispatch :default
  [_]
  (throw (ex-info "Unknown command" {})))

(defmethod dispatch "repl"
  [args]
  (let [{:keys [options rest-args]} (parse-opts args)
        ;; TODO apply options to force protject-type
        [project-type _] (e.f.jack-in/select-project {} cwd)
        port (e.u.nrepl/get-free-port)
        commands (e.f.jack-in/generate-command project-type port rest-args)]
    (if (:dry-run options)
      (println (str/join " " commands))
      (apply proc/shell {:out :inherit :in :inherit} commands))))

(defn -main [& args]
  (try
    (dispatch args)
    (catch Exception ex
      (binding [*out* *err*]
        (println (ex-message ex))))))

(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))

(comment
  (let [sample-args ["repl" "-A:dev" "--dry-run"]]
    (apply -main sample-args)))

;; vim:ft=clojure
