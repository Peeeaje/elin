(ns elin.test-helper.clj-kondo
  (:require
   [clojure.core.async :as async]
   [clojure.edn :as edn]
   [clojure.java.io :as io]
   [elin.protocol.clj-kondo :as e.p.clj-kondo]))

(defrecord TestCljKondo
  [analyzing?-atom analyzed-atom]
  e.p.clj-kondo/ICljKondo
  (analyze [_]
    (async/go nil))
  (restore [_]
    (async/go nil))
  (analyzing? [_]
    @analyzing?-atom)
  (analyzed? [_]
    true)
  (analysis [_]
    (:analysis @analyzed-atom))
  (analyze-code!! [_ _]
    nil))

(def ^:private analysis-data
  "NOTE analysis.edn is generated by `bb generate-test-analysis`"
  (-> (io/resource "analysis.edn")
      (slurp)
      (edn/read-string)))

(defn test-clj-kondo
  ([]
   (test-clj-kondo {}))
  ([option]
   (let [analyzing? (or (:analyzing? option)
                        false)
         analyzed (or (:analyzed option)
                      analysis-data)]
     (map->TestCljKondo {:analyzing?-atom (atom analyzing?)
                         :analyzed-atom (atom analyzed)}))))
